// Generated by CoffeeScript 1.6.3
(function() {
  var Filter, Pipeline, hapi, path, serve, synchronized;

  path = require('path');

  hapi = require('hapi');

  synchronized = require('synchronized');

  Filter = require('./Filter');

  Pipeline = require('./Pipeline');

  serve = function(project, addr, port) {
    var pkg, server, _i, _len, _ref;
    if (addr == null) {
      addr = '127.0.0.1';
    }
    if (port == null) {
      port = 8000;
    }
    _ref = project.packages;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pkg = _ref[_i];
      Pipeline.prototype.process(pkg, pkg.preprocessors);
    }
    console.log("Serving on http://" + addr + ":" + port + "/\n");
    server = hapi.createServer(addr, port, {
      views: {
        engines: {
          html: 'handlebars'
        },
        path: path.join(__dirname, '../templates')
      }
    });
    server.route({
      method: 'GET',
      path: '/{path*}',
      handler: {
        directory: {
          path: function() {
            if (!builder.outputTmpDir) {
              throw new Error('Expected builder.outputTmpDir to be set');
            }
            if (builder.buildError) {
              throw new Error('Did not expect builder.buildError to be set');
            }
            return builder.outputTmpDir;
          }
        }
      }
    });
    server.ext('onRequest', function(request, next) {
      return synchronized(builder, function(done) {
        var context, view;
        if (builder.buildError) {
          context = {
            message: builder.buildError.message,
            file: builder.buildError.file,
            line: builder.buildError.line,
            column: builder.buildError.column,
            stack: builder.buildError.stack
          };
          view = new hapi.response.View(request.server._views, 'error', context);
          next(view.code(500));
        } else {
          next();
        }
        return done();
      });
    });
    process.on('SIGINT', function() {
      return process.exit(1);
    });
    process.on('SIGTERM', function() {
      return process.exit(1);
    });
    return server.start();
  };

  exports.serve = serve;

}).call(this);

/*
//@ sourceMappingURL=Server.map
*/
